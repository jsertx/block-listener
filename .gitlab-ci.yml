variables:
    IMAGE_NAME: "blocklistener-app"
    CONTAINER_NAME: "blocklistener-app"
    CONSUMER_CONTAINER_NAME: "blocklistener-consumer"
    HOSTNAME: "blocklistener-app"
    CONSUMER_HOSTNAME: "blocklistener-consumer"
    PROMTAIL_LABEL: "log.promtail=true"

docker_build:
    stage: build
    image: docker:latest
    services:
        - docker:dind
    script:
        - docker build -t $IMAGE_NAME .
docker_deploy:
    stage: deploy
    image: docker:latest
    services:
        - docker:dind
    script:
        - echo "$ENV_FILE" > "$(pwd)/.env"
        - current_container_running=$(docker ps -q --filter "ancestor=$IMAGE_NAME")
        # remove previous container if running
        - docker rm -f $CONTAINER_NAME &>/dev/null && echo 'Removed old container $CONTAINER_NAME'
        - docker rm -f $CONSUMER_CONTAINER_NAME &>/dev/null && echo 'Removed old container $CONTAINER_NAME'
        # disable logging for now
        # - LOG_OPTIONS='--log-driver=loki --log-opt loki-url="https://${GRAFANA_LOKI_USER}:${GRAFANA_LOKI_API_KEY}@logs-prod-008.grafana.net/loki/api/v1/push" --log-opt loki-retries=10 --log-opt loki-batch-size=400 --log-opt max-size="4m" --log-opt max-buffer-size="20m" --log-opt loki-timeout="15s" --log-opt mode="non-blocking"'
        - docker run --tty -d -p 3000:80 --restart=always --env-file=.env --network="main" --log-driver json-file --name=$CONTAINER_NAME --label $PROMTAIL_LABEL --hostname=$HOSTNAME $IMAGE_NAME node build/blocklistener.js
        - docker run --tty -d --restart=always --env-file=.env --network="main" --log-driver json-file --name=$CONSUMER_CONTAINER_NAME --label $PROMTAIL_LABEL --hostname=$CONSUMER_HOSTNAME $IMAGE_NAME node build/consumers.js
        - rm "$(pwd)/.env"
    only:
        - main
